/* app.js ‚Äì optimized */
(() => {
  /* ---------- DOM –ö–≠–® ---------- */
  const $ = (sel, all = false) =>
    all ? document.querySelectorAll(sel) : document.querySelector(sel);

  const DOM = {
    chatBtn:      $('.chat-button'),
    chatModal:    $('#chatModal'),
    chatClose:    $('.chat-modal__close'),
    chatOverlay:  $('.chat-modal__overlay'),
    chatInput:    $('#chatInput'),
    chatSend:     $('#chatSend'),
    chatMessages: $('#chatMessages'),
    menuToggle:   $('.header__menu-toggle'),
    nav:          $('.header__nav'),
    navLinks:     $('.nav__link', true),
    heroCTA:      $('.hero__cta'),
    header:       $('.header')
  };

  /* ---------- CHAT ---------- */
  const BOT_RESPONSES = [
    '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ò–ò-–∞–≥–µ–Ω—Ç–æ–º.',
    '–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–∏–ø–∞—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.',
    '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Äî –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –æ–±–ª–∞—Å—Ç—å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–æ. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö?',
    '–ö–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—Ç—ã —Å—Ç–∞–Ω—É—Ç –µ—â—ë –ø–æ–ª–Ω–µ–µ.'
  ];

  const EASTER_EGGS = {
    –ø—Ä–∏–≤–µ—Ç: '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
    '–∫–∞–∫ –¥–µ–ª–∞': '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å?',
    '—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å':
      '–ù–µ–π—Ä–æ—Å–µ—Ç—å ‚Äî –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –º–æ–∑–≥–æ–º.',
    gpt:
      'GPT ‚Äî —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ª–µ–∂–∞—â–∞—è –≤ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.',
    '–±—É–¥—É—â–µ–µ –∏–∏':
      '–ë—É–¥—É—â–µ–µ –ò–ò –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ! AGI –∫ 2025-–º—É, –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –∫ 2027-–º—É.'
  };

  const Chat = (() => {
    const open = () => {
      DOM.chatModal.classList.add('active');
      DOM.chatInput.focus();
      trapFocus(DOM.chatModal);
    };

    const close = () => DOM.chatModal.classList.remove('active');

    const addMessage = (text, fromUser = false) => {
      const wrap = document.createElement('div');
      wrap.className = `chat-message ${
        fromUser ? 'chat-message--user' : 'chat-message--bot'
      }`;
      wrap.innerHTML = `<div class="chat-message__content">${text}</div>`;
      DOM.chatMessages.append(wrap);
      DOM.chatMessages.scrollTop = DOM.chatMessages.scrollHeight;
    };

    const typingIndicator = {
      show() {
        const html = `
          <div id="typing" class="chat-message chat-message--bot">
            <div class="chat-message__content"><span>‚Ä¢</span><span>‚Ä¢</span><span>‚Ä¢</span></div>
          </div>`;
        DOM.chatMessages.insertAdjacentHTML('beforeend', html);
        DOM.chatMessages.scrollTop = DOM.chatMessages.scrollHeight;
      },
      hide() {
        $('#typing')?.remove();
      }
    };

    const reply = msg => {
      const key = Object.keys(EASTER_EGGS).find(k => msg.includes(k));
      return key ? EASTER_EGGS[key] : BOT_RESPONSES[Math.random() * BOT_RESPONSES.length | 0];
    };

    const sendMessage = () => {
      const text = DOM.chatInput.value.trim();
      if (!text) return;

      addMessage(text, true);
      DOM.chatInput.value = '';
      DOM.chatSend.disabled = true;
      typingIndicator.show();

      setTimeout(() => {
        typingIndicator.hide();
        addMessage(reply(text.toLowerCase()));
        DOM.chatSend.disabled = false;
      }, 1500);
    };

    /* events */
    DOM.chatBtn.addEventListener('click', open);
    [DOM.chatClose, DOM.chatOverlay].forEach(el => el.addEventListener('click', close));
    DOM.chatSend.addEventListener('click', sendMessage);
    DOM.chatInput.addEventListener('keydown', e => e.key === 'Enter' && sendMessage());
    document.addEventListener('keydown', e => e.key === 'Escape' && close());

    return { open, close };
  })();

  /* ---------- NAVIGATION ---------- */
  const Navigation = (() => {
    const smoothScroll = targetID => {
      const el = $(targetID);
      if (!el) return;
      window.scrollTo({ top: el.offsetTop - 80, behavior: 'smooth' });
    };

    DOM.navLinks.forEach(link =>
      link.addEventListener('click', e => {
        e.preventDefault();
        smoothScroll(link.getAttribute('href'));
        MobileMenu.close(); // –Ω–∞ –º–æ–±–∏–ª–µ –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é
      })
    );

    DOM.heroCTA?.addEventListener('click', () => smoothScroll('#about'));
  })();

  /* ---------- HEADER HIDE ON SCROLL ---------- */
  const Header = (() => {
    let last = 0;
    const onScroll = () => {
      const cur = window.pageYOffset;
      DOM.header.style.transform =
        cur > last && cur > 100 ? 'translateY(-100%)' : 'translateY(0)';
      last = cur;
    };
    window.addEventListener('scroll', () => requestAnimationFrame(onScroll));
  })();

  /* ---------- MOBILE MENU ---------- */
  const MobileMenu = (() => {
    let open = false;
    const spans = $('span', true, DOM.menuToggle);

    const toggleIcon = () => {
      spans[0].style.transform = open ? 'rotate(45deg) translate(6px,6px)' : '';
      spans[1].style.opacity = open ? '0' : '1';
      spans[2].style.transform = open ? 'rotate(-45deg) translate(6px,-6px)' : '';
    };

    const toggle = () => {
      open = !open;
      DOM.nav.classList.toggle('nav--open', open);
      toggleIcon();
    };

    const close = () => open && toggle();

    DOM.menuToggle.addEventListener('click', toggle);
    window.addEventListener('resize', () => window.innerWidth > 768 && close());
    document.addEventListener('click', e => {
      if (open && !e.target.closest('.header__nav, .header__menu-toggle')) close();
    });

    return { close };
  })();

  /* ---------- SCROLL ANIMATIONS ---------- */
  const ScrollAnimations = (() => {
    const options = { threshold: 0.1 };
    const observer = new IntersectionObserver(
      entries =>
        entries.forEach(
          e =>
            e.isIntersecting &&
            e.target.classList.add('in-view') &&
            observer.unobserve(e.target)
        ),
      options
    );

    const init = () =>
      [
        '.stat-card',
        '.type-card',
        '.application-card',
        '.learning-card',
        '.timeline__item',
        '.business-stat'
      ]
        .join(',')
        .split(',')
        .forEach(sel =>
          $(sel, true).forEach(el => {
            el.classList.add('pre-view');
            observer.observe(el);
          })
        );

    document.addEventListener('DOMContentLoaded', init);
  })();

  /* ---------- ACCESSIBILITY: FOCUS TRAP ---------- */
  function trapFocus(modal) {
    const focusable = modal.querySelectorAll(
      'button,[href],input,select,textarea,[tabindex]:not([tabindex="-1"])'
    );
    const first = focusable[0],
      last = focusable[focusable.length - 1];

    modal.addEventListener('keydown', e => {
      if (e.key !== 'Tab') return;
      if (e.shiftKey && document.activeElement === first) {
        last.focus();
        e.preventDefault();
      } else if (!e.shiftKey && document.activeElement === last) {
        first.focus();
        e.preventDefault();
      }
    });
  }

  /* ---------- LOG ---------- */
  console.log('NeuralHub –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ üöÄ');
})();
